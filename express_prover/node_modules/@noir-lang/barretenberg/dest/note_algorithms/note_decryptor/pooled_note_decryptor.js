"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.PooledNoteDecryptor = void 0;
const viewing_key_1 = require("../../viewing_key");
const single_note_decryptor_1 = require("./single_note_decryptor");
class PooledNoteDecryptor {
    constructor(workerPool) {
        this.pool = [];
        this.pool = workerPool.workers.map(w => new single_note_decryptor_1.SingleNoteDecryptor(w));
    }
    async batchDecryptNotes(keysBuf, privateKey) {
        const numKeys = keysBuf.length / viewing_key_1.ViewingKey.SIZE;
        const numKeysPerBatch = Math.max(1, Math.floor(numKeys / this.pool.length));
        const numBatches = Math.min(Math.ceil(numKeys / numKeysPerBatch), this.pool.length);
        const remainingKeys = numKeys - numKeysPerBatch * numBatches;
        let dataStart = 0;
        const batches = [...Array(numBatches)].map((_, i) => {
            const dataEnd = dataStart + (numKeysPerBatch + +(i < remainingKeys)) * viewing_key_1.ViewingKey.SIZE;
            const keys = keysBuf.slice(dataStart, dataEnd);
            dataStart = dataEnd;
            return keys;
        });
        const results = await Promise.all(batches.map((batch, i) => this.pool[i].batchDecryptNotes(batch, privateKey)));
        return Buffer.concat(results);
    }
}
exports.PooledNoteDecryptor = PooledNoteDecryptor;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicG9vbGVkX25vdGVfZGVjcnlwdG9yLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL25vdGVfYWxnb3JpdGhtcy9ub3RlX2RlY3J5cHRvci9wb29sZWRfbm90ZV9kZWNyeXB0b3IudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBQUEsbURBQStDO0FBRy9DLG1FQUE4RDtBQUU5RCxNQUFhLG1CQUFtQjtJQUc5QixZQUFZLFVBQXNCO1FBRjFCLFNBQUksR0FBMEIsRUFBRSxDQUFDO1FBR3ZDLElBQUksQ0FBQyxJQUFJLEdBQUcsVUFBVSxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxJQUFJLDJDQUFtQixDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDdEUsQ0FBQztJQUVNLEtBQUssQ0FBQyxpQkFBaUIsQ0FBQyxPQUFlLEVBQUUsVUFBa0I7UUFDaEUsTUFBTSxPQUFPLEdBQUcsT0FBTyxDQUFDLE1BQU0sR0FBRyx3QkFBVSxDQUFDLElBQUksQ0FBQztRQUNqRCxNQUFNLGVBQWUsR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsRUFBRSxJQUFJLENBQUMsS0FBSyxDQUFDLE9BQU8sR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUM7UUFDNUUsTUFBTSxVQUFVLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLE9BQU8sR0FBRyxlQUFlLENBQUMsRUFBRSxJQUFJLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBQ3BGLE1BQU0sYUFBYSxHQUFHLE9BQU8sR0FBRyxlQUFlLEdBQUcsVUFBVSxDQUFDO1FBQzdELElBQUksU0FBUyxHQUFHLENBQUMsQ0FBQztRQUNsQixNQUFNLE9BQU8sR0FBRyxDQUFDLEdBQUcsS0FBSyxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxFQUFFO1lBQ2xELE1BQU0sT0FBTyxHQUFHLFNBQVMsR0FBRyxDQUFDLGVBQWUsR0FBRyxDQUFDLENBQUMsQ0FBQyxHQUFHLGFBQWEsQ0FBQyxDQUFDLEdBQUcsd0JBQVUsQ0FBQyxJQUFJLENBQUM7WUFDdkYsTUFBTSxJQUFJLEdBQUcsT0FBTyxDQUFDLEtBQUssQ0FBQyxTQUFTLEVBQUUsT0FBTyxDQUFDLENBQUM7WUFDL0MsU0FBUyxHQUFHLE9BQU8sQ0FBQztZQUNwQixPQUFPLElBQUksQ0FBQztRQUNkLENBQUMsQ0FBQyxDQUFDO1FBQ0gsTUFBTSxPQUFPLEdBQUcsTUFBTSxPQUFPLENBQUMsR0FBRyxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsQ0FBQyxLQUFLLEVBQUUsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLGlCQUFpQixDQUFDLEtBQUssRUFBRSxVQUFVLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDaEgsT0FBTyxNQUFNLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxDQUFDO0lBQ2hDLENBQUM7Q0FDRjtBQXRCRCxrREFzQkMifQ==