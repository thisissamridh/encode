"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Schnorr = void 0;
const tslib_1 = require("tslib");
const signature_1 = require("./signature");
const serialize_1 = require("../../serialize");
(0, tslib_1.__exportStar)(require("./signature"), exports);
class Schnorr {
    constructor(wasm) {
        this.wasm = wasm;
    }
    constructSignature(msg, pk) {
        this.wasm.transferToHeap(pk, 64);
        this.wasm.transferToHeap(msg, 96);
        this.wasm.call('construct_signature', 96, msg.length, 64, 0, 32);
        return new signature_1.SchnorrSignature(Buffer.from(this.wasm.sliceMemory(0, 64)));
    }
    computePublicKey(pk) {
        this.wasm.transferToHeap(pk, 0);
        this.wasm.call('compute_public_key', 0, 32);
        return Buffer.from(this.wasm.sliceMemory(32, 96));
    }
    verifySignature(msg, pubKey, sig) {
        this.wasm.transferToHeap(pubKey, 0);
        this.wasm.transferToHeap(sig.s(), 64);
        this.wasm.transferToHeap(sig.e(), 96);
        this.wasm.transferToHeap(msg, 128);
        return this.wasm.call('verify_signature', 128, msg.length, 0, 64, 96) ? true : false;
    }
    multiSigComputePublicKey(pk) {
        this.wasm.transferToHeap(pk, 128);
        this.wasm.call('multisig_create_multisig_public_key', 128, 0);
        return Buffer.from(this.wasm.sliceMemory(0, 128));
    }
    multiSigValidateAndCombinePublicKeys(pubKeys) {
        const buffer = (0, serialize_1.serializeBufferArrayToVector)(pubKeys);
        this.wasm.transferToHeap(buffer, 64);
        this.wasm.call('multisig_validate_and_combine_signer_pubkeys', 64, 0);
        return Buffer.from(this.wasm.sliceMemory(0, 64));
    }
    multiSigRoundOne() {
        this.wasm.call('multisig_construct_signature_round_1', 0, 128);
        return {
            publicOutput: Buffer.from(this.wasm.sliceMemory(0, 128)),
            privateOutput: Buffer.from(this.wasm.sliceMemory(128, 192)),
        };
    }
    multiSigRoundTwo(msg, pk, signerrRoundOnePrivateOutput, pubKeys, roundOnePublicOutputs) {
        const pubKeysBuffer = (0, serialize_1.serializeBufferArrayToVector)(pubKeys);
        const roundOneOutputsBuffer = (0, serialize_1.serializeBufferArrayToVector)(roundOnePublicOutputs);
        const msgPtr = 32;
        this.wasm.transferToHeap(msg, msgPtr);
        const pkPtr = msgPtr + msg.length;
        this.wasm.transferToHeap(pk, pkPtr);
        const roundOnePrivatePtr = pkPtr + 32;
        this.wasm.transferToHeap(signerrRoundOnePrivateOutput, roundOnePrivatePtr);
        const pubKeysPtr = roundOnePrivatePtr + 64;
        this.wasm.transferToHeap(pubKeysBuffer, pubKeysPtr);
        const roundOnePtr = pubKeysPtr + pubKeysBuffer.length;
        this.wasm.transferToHeap(roundOneOutputsBuffer, roundOnePtr);
        this.wasm.call('multisig_construct_signature_round_2', msgPtr, msg.length, pkPtr, roundOnePrivatePtr, pubKeysPtr, roundOnePtr, 0);
        return Buffer.from(this.wasm.sliceMemory(0, 32));
    }
    multiSigCombineSignatures(msg, pubKeys, roundOneOutputs, roundTwoOutputs) {
        const pubKeysBuffer = (0, serialize_1.serializeBufferArrayToVector)(pubKeys);
        const roundOneOutputsBuffer = (0, serialize_1.serializeBufferArrayToVector)(roundOneOutputs);
        const roundTwoOutputsBuffer = (0, serialize_1.serializeBufferArrayToVector)(roundTwoOutputs);
        const msgPtr = 64;
        this.wasm.transferToHeap(msg, msgPtr);
        const pubKeysPtr = msgPtr + msg.length;
        this.wasm.transferToHeap(pubKeysBuffer, pubKeysPtr);
        const roundOnePtr = pubKeysPtr + pubKeysBuffer.length;
        this.wasm.transferToHeap(roundOneOutputsBuffer, roundOnePtr);
        const roundTwoPtr = roundOnePtr + roundOneOutputsBuffer.length;
        this.wasm.transferToHeap(roundTwoOutputsBuffer, roundTwoPtr);
        this.wasm.call('multisig_combine_signatures', msgPtr, msg.length, pubKeysPtr, roundOnePtr, roundTwoPtr, 0, 32);
        return new signature_1.SchnorrSignature(Buffer.from(this.wasm.sliceMemory(0, 64)));
    }
}
exports.Schnorr = Schnorr;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvY3J5cHRvL3NjaG5vcnIvaW5kZXgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUNBLDJDQUErQztBQUUvQywrQ0FBK0Q7QUFFL0QsMkRBQTRCO0FBRTVCLE1BQWEsT0FBTztJQUNsQixZQUFvQixJQUFzQjtRQUF0QixTQUFJLEdBQUosSUFBSSxDQUFrQjtJQUFHLENBQUM7SUFFdkMsa0JBQWtCLENBQUMsR0FBZSxFQUFFLEVBQWM7UUFDdkQsSUFBSSxDQUFDLElBQUksQ0FBQyxjQUFjLENBQUMsRUFBRSxFQUFFLEVBQUUsQ0FBQyxDQUFDO1FBQ2pDLElBQUksQ0FBQyxJQUFJLENBQUMsY0FBYyxDQUFDLEdBQUcsRUFBRSxFQUFFLENBQUMsQ0FBQztRQUNsQyxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxxQkFBcUIsRUFBRSxFQUFFLEVBQUUsR0FBRyxDQUFDLE1BQU0sRUFBRSxFQUFFLEVBQUUsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDO1FBQ2pFLE9BQU8sSUFBSSw0QkFBZ0IsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDekUsQ0FBQztJQUVNLGdCQUFnQixDQUFDLEVBQWM7UUFDcEMsSUFBSSxDQUFDLElBQUksQ0FBQyxjQUFjLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQyxDQUFDO1FBQ2hDLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLG9CQUFvQixFQUFFLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQztRQUM1QyxPQUFPLE1BQU0sQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsRUFBRSxFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUM7SUFDcEQsQ0FBQztJQUVNLGVBQWUsQ0FBQyxH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