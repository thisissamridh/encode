"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.BridgeId = void 0;
const asset_1 = require("../asset");
const bigint_buffer_1 = require("../bigint_buffer");
const bit_config_1 = require("./bit_config");
const bridge_id_config_1 = require("./bridge_id_config");
const randomInt = (to = 2 ** 30 - 1) => Math.floor(Math.random() * (to + 1));
const getNumber = (val, offset, size) => Number((val >> BigInt(offset)) & ((BigInt(1) << BigInt(size)) - BigInt(1)));
class BridgeId {
    constructor(addressId, inputAssetIdA, outputAssetIdA, inputAssetIdB, outputAssetIdB, auxData = 0) {
        this.addressId = addressId;
        this.inputAssetIdA = inputAssetIdA;
        this.outputAssetIdA = outputAssetIdA;
        this.inputAssetIdB = inputAssetIdB;
        this.outputAssetIdB = outputAssetIdB;
        this.auxData = auxData;
        this.bitConfig = new bit_config_1.BitConfig(inputAssetIdB !== undefined, outputAssetIdB !== undefined);
    }
    static random() {
        return new BridgeId(randomInt(), randomInt(), randomInt(), randomInt(), randomInt(), randomInt());
    }
    static fromBigInt(val) {
        const addressId = getNumber(val, bridge_id_config_1.ADDRESS_OFFSET, bridge_id_config_1.ADDRESS_BIT_LEN);
        const inputAssetIdA = getNumber(val, bridge_id_config_1.INPUT_ASSET_ID_A_OFFSET, bridge_id_config_1.INPUT_ASSET_ID_A_LEN);
        const outputAssetIdA = getNumber(val, bridge_id_config_1.OUTPUT_ASSET_ID_A_OFFSET, bridge_id_config_1.OUTPUT_ASSET_ID_A_LEN);
        const inputAssetIdB = getNumber(val, bridge_id_config_1.INPUT_ASSET_ID_B_OFFSET, bridge_id_config_1.INPUT_ASSET_ID_B_LEN);
        const outputAssetIdB = getNumber(val, bridge_id_config_1.OUTPUT_ASSET_ID_B_OFFSET, bridge_id_config_1.OUTPUT_ASSET_ID_B_LEN);
        const auxData = getNumber(val, bridge_id_config_1.AUX_DATA_OFFSET, bridge_id_config_1.AUX_DATA_LEN);
        const bitConfig = bit_config_1.BitConfig.fromBigInt(BigInt(getNumber(val, bridge_id_config_1.BITCONFIG_OFFSET, bridge_id_config_1.BITCONFIG_LEN)));
        if (!bitConfig.secondInputInUse && inputAssetIdB) {
            throw new Error('Inconsistent second input.');
        }
        if (!bitConfig.secondOutputInUse && outputAssetIdB) {
            throw new Error('Inconsistent second output.');
        }
        return new BridgeId(addressId, inputAssetIdA, outputAssetIdA, bitConfig.secondInputInUse ? inputAssetIdB : undefined, bitConfig.secondOutputInUse ? outputAssetIdB : undefined, auxData);
    }
    static fromBuffer(buf) {
        if (buf.length !== 32) {
            throw new Error('Invalid buffer.');
        }
        return BridgeId.fromBigInt((0, bigint_buffer_1.toBigIntBE)(buf));
    }
    static fromString(str) {
        return BridgeId.fromBuffer(Buffer.from(str.replace(/^0x/i, ''), 'hex'));
    }
    get firstInputVirtual() {
        return (0, asset_1.isVirtualAsset)(this.inputAssetIdA);
    }
    get secondInputVirtual() {
        return !!this.inputAssetIdB && (0, asset_1.isVirtualAsset)(this.inputAssetIdB);
    }
    get firstOutputVirtual() {
        return (0, asset_1.isVirtualAsset)(this.outputAssetIdA);
    }
    get secondOutputVirtual() {
        return !!this.outputAssetIdB && (0, asset_1.isVirtualAsset)(this.outputAssetIdB);
    }
    get secondInputInUse() {
        return this.bitConfig.secondInputInUse;
    }
    get secondOutputInUse() {
        return this.bitConfig.secondOutputInUse;
    }
    get numInputAssets() {
        return this.bitConfig.secondInputInUse ? 2 : 1;
    }
    get numOutputAssets() {
        return this.bitConfig.secondOutputInUse ? 2 : 1;
    }
    toBigInt() {
        return (BigInt(this.addressId) +
            (BigInt(this.inputAssetIdA) << BigInt(bridge_id_config_1.INPUT_ASSET_ID_A_OFFSET)) +
            (BigInt(this.inputAssetIdB || 0) << BigInt(bridge_id_config_1.INPUT_ASSET_ID_B_OFFSET)) +
            (BigInt(this.outputAssetIdA) << BigInt(bridge_id_config_1.OUTPUT_ASSET_ID_A_OFFSET)) +
            (BigInt(this.outputAssetIdB || 0) << BigInt(bridge_id_config_1.OUTPUT_ASSET_ID_B_OFFSET)) +
            (this.bitConfig.toBigInt() << BigInt(bridge_id_config_1.BITCONFIG_OFFSET)) +
            (BigInt(this.auxData) << BigInt(bridge_id_config_1.AUX_DATA_OFFSET)));
    }
    toBuffer() {
        return (0, bigint_buffer_1.toBufferBE)(this.toBigInt(), 32);
    }
    toString() {
        return `0x${this.toBuffer().toString('hex')}`;
    }
    equals(id) {
        return id.toBuffer().equals(this.toBuffer());
    }
}
exports.BridgeId = BridgeId;
BridgeId.ZERO = new BridgeId(0, 0, 0);
BridgeId.ENCODED_LENGTH_IN_BYTES = 32;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYnJpZGdlX2lkLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2JyaWRnZV9pZC9icmlkZ2VfaWQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBQUEsb0NBQTBDO0FBQzFDLG9EQUEwRDtBQUMxRCw2Q0FBeUM7QUFDekMseURBZTRCO0FBRTVCLE1BQU0sU0FBUyxHQUFHLENBQUMsRUFBRSxHQUFHLENBQUMsSUFBSSxFQUFFLEdBQUcsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUUsR0FBRyxDQUFDLEVBQUUsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDO0FBRTdFLE1BQU0sU0FBUyxHQUFHLENBQUMsR0FBVyxFQUFFLE1BQWMsRUFBRSxJQUFZLEVBQUUsRUFBRSxDQUM5RCxNQUFNLENBQUMsQ0FBQyxHQUFHLElBQUksTUFBTSxDQUFDLE1BQU0sQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsSUFBSSxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUMsR0FBRyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO0FBRTlFLE1BQWEsUUFBUTtJQU1uQixZQUNrQixTQUFpQixFQUNqQixhQUFxQixFQUNyQixjQUFzQixFQUN0QixhQUFzQixFQUN0QixjQUF1QixFQUN2QixVQUFVLENBQUM7UUFMWCxjQUFTLEdBQVQsU0FBUyxDQUFRO1FBQ2pCLGtCQUFhLEdBQWIsYUFBYSxDQUFRO1FBQ3JCLG1CQUFjLEdBQWQsY0FBYyxDQUFRO1FBQ3RCLGtCQUFhLEdBQWIsYUFBYSxDQUFTO1FBQ3RCLG1CQUFjLEdBQWQsY0FBYyxDQUFTO1FBQ3ZCLFlBQU8sR0FBUCxPQUFPLENBQUk7UUFFM0IsSUFBSSxDQUFDLFNBQVMsR0FBRyxJQUFJLHNCQUFTLENBQUMsYUFBYSxLQUFLLFNBQVMsRUFBRSxjQUFjLEtBQUssU0FBUyxDQUFDLENBQUM7SUFDNUYsQ0FBQztJQUVELE1BQU0sQ0FBQyxNQUFNO1FBQ1gsT0FBTyxJQUFJLFFBQVEsQ0FBQyxTQUFTLEVBQUUsRUFBRSxTQUFTLEVBQUUsRUFBRSxTQUFTLEVBQUUsRUFBRSxTQUFTLEVBQUUsRUFBRSxTQUFTLEVBQUUsRUFBRSxTQUFTLEVBQUUsQ0FBQyxDQUFDO0lBQ3BHLENBQUM7SUFFRCxNQUFNLENBQUMsVUFBVSxDQUFDLEdBQVc7UUFDM0IsTUFBTSxTQUFTLEdBQUcsU0FBUyxDQUFDLEdBQUcsRUFBRSxpQ0FBYyxFQUFFLGtDQUFlLENBQUMsQ0FBQztRQUNsRSxNQUFNLGFBQWEsR0FBRyxTQUFTLENBQUMsR0FBRyxFQUFFLDBDQUF1QixFQUFFLHVDQUFvQixDQUFDLENBQUM7UUFDcEYsTUFBTSxjQUFjLEdBQUcsU0FBUyxDQUFDLEdBQUcsRUFBRSwyQ0FBd0IsRUFBRSx3Q0FBcUIsQ0FBQyxDQUFDO1FBQ3ZGLE1BQU0sYUFBYSxHQUFHLFNBQVMsQ0FBQyxHQUFHLEVBQUUsMENBQXVCLEVBQUUsdUNBQW9CLENBQUMsQ0FBQztRQUNwRixNQUFNLGNBQWMsR0FBRyxTQUFTLENBQUMsR0FBRyxFQUFFLDJDQUF3QixFQUFFLHdDQUFxQixDQUFDLENBQUM7UUFDdkYsTUFBTSxPQUFPLEdBQUcsU0FBUyxDQUFDLEdBQUcsRUFBRSxrQ0FBZSxFQUFFLCtCQUFZLENBQUMsQ0FBQztRQUU5RCxNQUFNLFNBQVMsR0FBRyxzQkFBUyxDQUFDLFVBQVUsQ0FBQyxNQUFNLENBQUMsU0FBUyxDQUFDLEdBQUcsRUFBRSxtQ0FBZ0IsRUFBRSxnQ0FBYSxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ2hHLElBQUksQ0FBQyxTQUFTLENBQUMsZ0JBQWdCLElBQUksYUFBYSxFQUFFO1lBQ2hELE1BQU0sSUFBSSxLQUFLLENBQUMsNEJBQTRCLENBQUMsQ0FBQztTQUMvQztRQUNELElBQUksQ0FBQyxTQUFTLENBQUMsaUJBQWlCLElBQUksY0FBYyxFQUFFO1lBQ2xELE1BQU0sSUFBSSxLQUFLLENBQUMsNkJBQTZCLENBQUMsQ0FBQztTQUNoRDtRQUVELE9BQU8sSUFBSSxRQUFRLENBQ2pCLFNBQVMsRUFDVCxhQUFhLEVBQ2IsY0FBYyxFQUNkLFNBQVMsQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDLENBQUMsYUFBYSxDQUFDLENBQUMsQ0FBQyxTQUFTLEVBQ3RELFNBQVMsQ0FBQyxpQkFBaUIsQ0FBQyxDQUFDLENBQUMsY0FBYyxDQUFDLENBQUMsQ0FBQyxTQUFTLEVBQ3hELE9BQU8sQ0FDUixDQUFDO0lBQ0osQ0FBQztJQUVELE1BQU0sQ0FBQyxVQUFVLENBQUMsR0FBVztRQUMzQixJQUFJLEdBQUcsQ0FBQyxNQUFNLEtBQUssRUFBRSxFQUFFO1lBQ3JCLE1BQU0sSUFBSSxLQUFLLENBQUMsaUJBQWlCLENBQUMsQ0FBQztTQUNwQztRQUVELE9BQU8sUUFBUSxDQUFDLFVBQVUsQ0FBQyxJQUFBLDBCQUFVLEVBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQztJQUM5QyxDQUFDO0lBRUQsTUFBTSxDQUFDLFVBQVUsQ0FBQyxHQUFXO1FBQzNCLE9BQU8sUUFBUSxDQUFDLFVBQVUsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxPQUFPLENBQUMsTUFBTSxFQUFFLEVBQUUsQ0FBQyxFQUFFLEtBQUssQ0FBQyxDQUFDLENBQUM7SUFDMUUsQ0FBQztJQUVELElBQUksaUJBQWlCO1FBQ25CLE9BQU8sSUFBQSxzQkFBYyxFQUFDLElBQUksQ0FBQyxhQUFhLENBQUMsQ0FBQztJQUM1QyxDQUFDO0lBRUQsSUFBSSxrQkFBa0I7UUFDcEIsT0FBTyxDQUFDLENBQUMsSUFBSSxDQUFDLGFBQWEsSUFBSSxJQUFBLHNCQUFjLEVBQUMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxDQUFDO0lBQ3BFLENBQUM7SUFFRCxJQUFJLGtCQUFrQjtRQUNwQixPQUFPLElBQUEsc0JBQWMsRUFBQyxJQUFJLENBQUMsY0FBYyxDQUFDLENBQUM7SUFDN0MsQ0FBQztJQUVELElBQUksbUJBQW1CO1FBQ3JCLE9BQU8sQ0FBQyxDQUFDLElBQUksQ0FBQyxjQUFjLElBQUksSUFBQSxzQkFBYyxFQUFDLElBQUksQ0FBQyxjQUFjLENBQUMsQ0FBQztJQUN0RSxDQUFDO0lBRUQsSUFBSSxnQkFBZ0I7UUFDbEIsT0FBTyxJQUFJLENBQUMsU0FBUyxDQUFDLGdCQUFnQixDQUFDO0lBQ3pDLENBQUM7SUFFRCxJQUFJLGlCQUFpQjtRQUNuQixPQUFPLElBQUksQ0FBQyxTQUFTLENBQUMsaUJBQWlCLENBQUM7SUFDMUMsQ0FBQztJQUVELElBQUksY0FBYztRQUNoQixPQUFPLElBQUksQ0FBQyxTQUFTLENBQUMsZ0JBQWdCLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQ2pELENBQUM7SUFFRCxJQUFJLGVBQWU7UUFDakIsT0FBTyxJQUFJLENBQUMsU0FBUyxDQUFDLGlCQUFpQixDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUNsRCxDQUFDO0lBRUQsUUFBUTtRQUNOLE9BQU8sQ0FDTCxNQUFNLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQztZQUN0QixDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsYUFBYSxDQUFDLElBQUksTUFBTSxDQUFDLDBDQUF1QixDQUFDLENBQUM7WUFDL0QsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLGFBQWEsSUFBSSxDQUFDLENBQUMsSUFBSSxNQUFNLENBQUMsMENBQXVCLENBQUMsQ0FBQztZQUNwRSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsY0FBYyxDQUFDLElBQUksTUFBTSxDQUFDLDJDQUF3QixDQUFDLENBQUM7WUFDakUsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLGNBQWMsSUFBSSxDQUFDLENBQUMsSUFBSSxNQUFNLENBQUMsMkNBQXdCLENBQUMsQ0FBQztZQUN0RSxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsUUFBUSxFQUFFLElBQUksTUFBTSxDQUFDLG1DQUFnQixDQUFDLENBQUM7WUFDdkQsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxJQUFJLE1BQU0sQ0FBQyxrQ0FBZSxDQUFDLENBQUMsQ0FDbEQsQ0FBQztJQUNKLENBQUM7SUFFRCxRQUFRO1FBQ04sT0FBTyxJQUFBLDBCQUFVLEVBQUMsSUFBSSxDQUFDLFFBQVEsRUFBRSxFQUFFLEVBQUUsQ0FBQyxDQUFDO0lBQ3pDLENBQUM7SUFFRCxRQUFRO1FBQ04sT0FBTyxLQUFLLElBQUksQ0FBQyxRQUFRLEVBQUUsQ0FBQyxRQUFRLENBQUMsS0FBSyxDQUFDLEVBQUUsQ0FBQztJQUNoRCxDQUFDO0lBRUQsTUFBTSxDQUFDLEVBQVk7UUFDakIsT0FBTyxFQUFFLENBQUMsUUFBUSxFQUFFLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxRQUFRLEVBQUUsQ0FBQyxDQUFDO0lBQy9DLENBQUM7O0FBakhILDRCQWtIQztBQWpIUSxhQUFJLEdBQUcsSUFBSSxRQUFRLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQztBQUM3QixnQ0FBdUIsR0FBRyxFQUFFLENBQUMifQ==