"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.WorldStateDb = exports.RollupTreeId = void 0;
const fifo_1 = require("../fifo");
const fs_extra_1 = require("fs-extra");
const merkle_tree_1 = require("../merkle_tree");
const bigint_buffer_1 = require("../bigint_buffer");
const child_process_1 = require("child_process");
const promise_readable_1 = require("promise-readable");
const serialize_1 = require("../serialize");
var Command;
(function (Command) {
    Command[Command["GET"] = 0] = "GET";
    Command[Command["PUT"] = 1] = "PUT";
    Command[Command["COMMIT"] = 2] = "COMMIT";
    Command[Command["ROLLBACK"] = 3] = "ROLLBACK";
    Command[Command["GET_PATH"] = 4] = "GET_PATH";
    Command[Command["BATCH_PUT"] = 5] = "BATCH_PUT";
})(Command || (Command = {}));
var RollupTreeId;
(function (RollupTreeId) {
    RollupTreeId[RollupTreeId["DATA"] = 0] = "DATA";
    RollupTreeId[RollupTreeId["NULL"] = 1] = "NULL";
    RollupTreeId[RollupTreeId["ROOT"] = 2] = "ROOT";
    RollupTreeId[RollupTreeId["DEFI"] = 3] = "DEFI";
})(RollupTreeId = exports.RollupTreeId || (exports.RollupTreeId = {}));
class WorldStateDb {
    constructor(dbPath = './data/world_state.db') {
        this.dbPath = dbPath;
        this.stdioQueue = new fifo_1.MemoryFifo();
        this.roots = [];
        this.sizes = [];
        this.binPath = '../barretenberg/build/bin/db_cli';
    }
    async start() {
        await this.launch();
        // eslint-disable-next-line @typescript-eslint/no-floating-promises
        this.processStdioQueue();
    }
    stop() {
        this.stdioQueue.cancel();
        if (this.proc) {
            this.proc.kill('SIGINT');
        }
    }
    getRoot(treeId) {
        return this.roots[treeId];
    }
    getSize(treeId) {
        return this.sizes[treeId];
    }
    async getSubtreeRoot(treeId, index, depth) {
        const path = await this.getHashPath(treeId, index);
        const hashPair = path.data[depth];
        // figure out whether our root is the lhs or rhs of the hash pair
        const isLeft = (index >> BigInt(depth)) % BigInt(2) == BigInt(0);
        const subTreeRoot = hashPair[isLeft ? 0 : 1];
        return subTreeRoot;
    }
    get(treeId, index) {
        return new Promise(resolve => this.stdioQueue.put(async () => resolve(await this.get_(treeId, index))));
    }
    async get_(treeId, index) {
        const buffer = Buffer.concat([Buffer.from([Command.GET, treeId]), (0, bigint_buffer_1.toBufferBE)(index, 32)]);
        this.proc.stdin.write(buffer);
        const result = await this.stdout.read(32);
        return result;
    }
    getHashPath(treeId, index) {
        return new Promise(resolve => this.stdioQueue.put(async () => resolve(await this.getHashPath_(treeId, index))));
    }
    async getHashPath_(treeId, index) {
        const buffer = Buffer.concat([Buffer.from([Command.GET_PATH, treeId]), (0, bigint_buffer_1.toBufferBE)(index, 32)]);
        this.proc.stdin.write(buffer);
        const depth = (await this.stdout.read(4)).readUInt32BE(0);
        const result = await this.stdout.read(depth * 64);
        const path = new merkle_tree_1.HashPath();
        for (let i = 0; i < depth; ++i) {
            const lhs = result.slice(i * 64, i * 64 + 32);
            const rhs = result.slice(i * 64 + 32, i * 64 + 64);
            path.data.push([lhs, rhs]);
        }
        return path;
    }
    put(treeId, index, value) {
        if (value.length !== 32) {
            throw Error('Values must be 32 bytes.');
        }
        return new Promise(resolve => this.stdioQueue.put(async () => resolve(await this.put_(treeId, index, value))));
    }
    async put_(treeId, index, value) {
        const buffer = Buffer.concat([Buffer.from([Command.PUT, treeId]), (0, bigint_buffer_1.toBufferBE)(index, 32), value]);
        this.proc.stdin.write(buffer);
        this.roots[treeId] = await this.stdout.read(32);
        if (index + BigInt(1) > this.sizes[treeId]) {
            this.sizes[treeId] = index + BigInt(1);
        }
        return this.roots[treeId];
    }
    batchPut(entries) {
        return new Promise(resolve => this.stdioQueue.put(async () => resolve(await this.batchPut_(entries))));
    }
    async batchPut_(entries) {
        const bufs = entries.map(e => Buffer.concat([Buffer.from([e.treeId]), (0, bigint_buffer_1.toBufferBE)(e.index, 32), e.value]));
        const buffer = Buffer.concat([Buffer.from([Command.BATCH_PUT]), (0, serialize_1.serializeBufferArrayToVector)(bufs)]);
        this.proc.stdin.write(buffer);
        await this.readMetadata();
    }
    async commit() {
        await new Promise(resolve => {
            this.stdioQueue.put(async () => {
                const buffer = Buffer.from([Command.COMMIT]);
                this.proc.stdin.write(buffer);
                await this.readMetadata();
                resolve();
            });
        });
    }
    async rollback() {
        await new Promise(resolve => {
            this.stdioQueue.put(async () => {
                const buffer = Buffer.from([Command.ROLLBACK]);
                this.proc.stdin.write(buffer);
                await this.readMetadata();
                resolve();
            });
        });
    }
    destroy() {
        (0, child_process_1.execSync)(`${this.binPath} reset ${this.dbPath}`);
    }
    async launch() {
        await (0, fs_extra_1.mkdirp)('./data');
        const proc = (this.proc = (0, child_process_1.spawn)(this.binPath, [this.dbPath]));
        proc.stderr.on('data', () => { });
        proc.on('close', code => {
            this.proc = undefined;
            if (code) {
                console.log(`db_cli exited with unexpected code ${code}.`);
                // Should never happen, so process termination is the only sensible response.
                process.exit(1);
            }
        });
        proc.on('error', console.log);
        this.stdout = new promise_readable_1.PromiseReadable(this.proc.stdout);
        await this.readMetadata();
    }
    async readMetadata() {
        this.roots[0] = await this.stdout.read(32);
        this.roots[1] = await this.stdout.read(32);
        this.roots[2] = await this.stdout.read(32);
        this.roots[3] = await this.stdout.read(32);
        const dataSize = await this.stdout.read(32);
        const nullifierSize = await this.stdout.read(32);
        const rootSize = await this.stdout.read(32);
        const defiSize = await this.stdout.read(32);
        this.sizes[0] = (0, bigint_buffer_1.toBigIntBE)(dataSize);
        this.sizes[1] = (0, bigint_buffer_1.toBigIntBE)(nullifierSize);
        this.sizes[2] = (0, bigint_buffer_1.toBigIntBE)(rootSize);
        this.sizes[3] = (0, bigint_buffer_1.toBigIntBE)(defiSize);
    }
    async processStdioQueue() {
        while (true) {
            const fn = await this.stdioQueue.get();
            if (!fn) {
                break;
            }
            await fn();
        }
    }
}
exports.WorldStateDb = WorldStateDb;
//# sourceMappingURL=data:application/json;base64,