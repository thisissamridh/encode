"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.rollupProviderStatusFromJson = exports.rollupProviderStatusToJson = exports.partialRuntimeConfigFromJson = exports.runtimeConfigFromJson = exports.runtimeConfigToJson = void 0;
const tslib_1 = require("tslib");
const address_1 = require("../address");
const blockchain_1 = require("../blockchain");
const bridge_config_1 = require("./bridge_config");
const bridge_status_1 = require("./bridge_status");
const privacy_set_1 = require("./privacy_set");
(0, tslib_1.__exportStar)(require("./bridge_config"), exports);
(0, tslib_1.__exportStar)(require("./bridge_status"), exports);
(0, tslib_1.__exportStar)(require("./privacy_set"), exports);
const runtimeConfigToJson = ({ maxFeeGasPrice, maxFeePerGas, maxPriorityFeePerGas, bridgeConfigs, privacySets, rollupBeneficiary, ...rest }) => ({
    ...rest,
    maxFeeGasPrice: maxFeeGasPrice.toString(),
    maxFeePerGas: maxFeePerGas.toString(),
    maxPriorityFeePerGas: maxPriorityFeePerGas.toString(),
    bridgeConfigs: bridgeConfigs.map(bridge_config_1.bridgeConfigToJson),
    privacySets: (0, privacy_set_1.privacySetsToJson)(privacySets),
    rollupBeneficiary: rollupBeneficiary ? rollupBeneficiary.toString() : undefined,
});
exports.runtimeConfigToJson = runtimeConfigToJson;
const runtimeConfigFromJson = ({ maxFeeGasPrice, maxFeePerGas, maxPriorityFeePerGas, bridgeConfigs, privacySets, rollupBeneficiary, ...rest }) => ({
    ...rest,
    maxFeeGasPrice: BigInt(maxFeeGasPrice),
    maxFeePerGas: BigInt(maxFeePerGas),
    maxPriorityFeePerGas: BigInt(maxPriorityFeePerGas),
    bridgeConfigs: bridgeConfigs.map(bridge_config_1.bridgeConfigFromJson),
    privacySets: (0, privacy_set_1.privacySetsFromJson)(privacySets),
    rollupBeneficiary: rollupBeneficiary ? address_1.EthAddress.fromString(rollupBeneficiary) : undefined,
});
exports.runtimeConfigFromJson = runtimeConfigFromJson;
const partialRuntimeConfigFromJson = ({ maxFeeGasPrice, maxFeePerGas, maxPriorityFeePerGas, bridgeConfigs, privacySets, rollupBeneficiary, ...rest }) => ({
    ...rest,
    ...(maxFeeGasPrice !== undefined ? { maxFeeGasPrice: BigInt(maxFeeGasPrice) } : {}),
    ...(maxFeePerGas !== undefined ? { maxFeePerGas: BigInt(maxFeePerGas) } : {}),
    ...(maxPriorityFeePerGas !== undefined ? { maxPriorityFeePerGas: BigInt(maxPriorityFeePerGas) } : {}),
    ...(bridgeConfigs ? { bridgeConfigs: bridgeConfigs.map(bridge_config_1.bridgeConfigFromJson) } : {}),
    ...(privacySets ? { privacySets: (0, privacy_set_1.privacySetsFromJson)(privacySets) } : {}),
    ...(rollupBeneficiary ? { rollupBeneficiary: address_1.EthAddress.fromString(rollupBeneficiary) } : {}),
});
exports.partialRuntimeConfigFromJson = partialRuntimeConfigFromJson;
const rollupProviderStatusToJson = ({ blockchainStatus, nextPublishTime, runtimeConfig, bridgeStatus, ...rest }) => ({
    ...rest,
    blockchainStatus: (0, blockchain_1.blockchainStatusToJson)(blockchainStatus),
    nextPublishTime: nextPublishTime.toISOString(),
    runtimeConfig: (0, exports.runtimeConfigToJson)(runtimeConfig),
    bridgeStatus: bridgeStatus.map(bridge_status_1.bridgeStatusToJson),
});
exports.rollupProviderStatusToJson = rollupProviderStatusToJson;
const rollupProviderStatusFromJson = ({ blockchainStatus, nextPublishTime, runtimeConfig, bridgeStatus, ...rest }) => ({
    ...rest,
    blockchainStatus: (0, blockchain_1.blockchainStatusFromJson)(blockchainStatus),
    nextPublishTime: new Date(nextPublishTime),
    runtimeConfig: (0, exports.runtimeConfigFromJson)(runtimeConfig),
    bridgeStatus: bridgeStatus.map(bridge_status_1.bridgeStatusFromJson),
});
exports.rollupProviderStatusFromJson = rollupProviderStatusFromJson;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicm9sbHVwX3Byb3ZpZGVyX3N0YXR1cy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9yb2xsdXBfcHJvdmlkZXIvcm9sbHVwX3Byb3ZpZGVyX3N0YXR1cy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsd0NBQXdDO0FBQ3hDLDhDQUt1QjtBQUN2QixtREFBMkc7QUFDM0csbURBQTJHO0FBQzNHLCtDQUFtRztBQUVuRywrREFBZ0M7QUFDaEMsK0RBQWdDO0FBQ2hDLDZEQUE4QjtBQTBDdkIsTUFBTSxtQkFBbUIsR0FBRyxDQUFDLEVBQ2xDLGNBQWMsRUFDZCxZQUFZLEVBQ1osb0JBQW9CLEVBQ3BCLGFBQWEsRUFDYixXQUFXLEVBQ1gsaUJBQWlCLEVBQ2pCLEdBQUcsSUFBSSxFQUNPLEVBQXFCLEVBQUUsQ0FBQyxDQUFDO0lBQ3ZDLEdBQUcsSUFBSTtJQUNQLGNBQWMsRUFBRSxjQUFjLENBQUMsUUFBUSxFQUFFO0lBQ3pDLFlBQVksRUFBRSxZQUFZLENBQUMsUUFBUSxFQUFFO0lBQ3JDLG9CQUFvQixFQUFFLG9CQUFvQixDQUFDLFFBQVEsRUFBRTtJQUNyRCxhQUFhLEVBQUUsYUFBYSxDQUFDLEdBQUcsQ0FBQyxrQ0FBa0IsQ0FBQztJQUNwRCxXQUFXLEVBQUUsSUFBQSwrQkFBaUIsRUFBQyxXQUFXLENBQUM7SUFDM0MsaUJBQWlCLEVBQUUsaUJBQWlCLENBQUMsQ0FBQyxDQUFDLGlCQUFpQixDQUFDLFFBQVEsRUFBRSxDQUFDLENBQUMsQ0FBQyxTQUFTO0NBQ2hGLENBQUMsQ0FBQztBQWhCVSxRQUFBLG1CQUFtQix1QkFnQjdCO0FBRUksTUFBTSxxQkFBcUIsR0FBRyxDQUFDLEVBQ3BDLGNBQWMsRUFDZCxZQUFZLEVBQ1osb0JBQW9CLEVBQ3BCLGFBQWEsRUFDYixXQUFXLEVBQ1gsaUJBQWlCLEVBQ2pCLEdBQUcsSUFBSSxFQUNXLEVBQWlCLEVBQUUsQ0FBQyxDQUFDO0lBQ3ZDLEdBQUcsSUFBSTtJQUNQLGNBQWMs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