"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.depositTxFromJson = exports.depositTxToJson = exports.initialWorldStateFromBuffer = exports.initialWorldStateToBuffer = exports.pendingTxFromJson = exports.pendingTxToJson = exports.txFromJson = exports.txToJson = exports.DefiSettlementTime = exports.TxSettlementTime = void 0;
const address_1 = require("../address");
const tx_id_1 = require("../tx_id");
var TxSettlementTime;
(function (TxSettlementTime) {
    TxSettlementTime[TxSettlementTime["NEXT_ROLLUP"] = 0] = "NEXT_ROLLUP";
    TxSettlementTime[TxSettlementTime["INSTANT"] = 1] = "INSTANT";
})(TxSettlementTime = exports.TxSettlementTime || (exports.TxSettlementTime = {}));
var DefiSettlementTime;
(function (DefiSettlementTime) {
    DefiSettlementTime[DefiSettlementTime["DEADLINE"] = 0] = "DEADLINE";
    DefiSettlementTime[DefiSettlementTime["NEXT_ROLLUP"] = 1] = "NEXT_ROLLUP";
    DefiSettlementTime[DefiSettlementTime["INSTANT"] = 2] = "INSTANT";
})(DefiSettlementTime = exports.DefiSettlementTime || (exports.DefiSettlementTime = {}));
const txToJson = ({ proofData, offchainTxData, depositSignature }) => ({
    proofData: proofData.toString('hex'),
    offchainTxData: offchainTxData.toString('hex'),
    depositSignature: depositSignature ? depositSignature.toString('hex') : undefined,
});
exports.txToJson = txToJson;
const txFromJson = ({ proofData, offchainTxData, depositSignature }) => ({
    proofData: Buffer.from(proofData, 'hex'),
    offchainTxData: Buffer.from(offchainTxData, 'hex'),
    depositSignature: depositSignature ? Buffer.from(depositSignature, 'hex') : undefined,
});
exports.txFromJson = txFromJson;
const pendingTxToJson = ({ txId, noteCommitment1, noteCommitment2 }) => ({
    txId: txId.toString(),
    noteCommitment1: noteCommitment1.toString('hex'),
    noteCommitment2: noteCommitment2.toString('hex'),
});
exports.pendingTxToJson = pendingTxToJson;
const pendingTxFromJson = ({ txId, noteCommitment1, noteCommitment2 }) => ({
    txId: tx_id_1.TxId.fromString(txId),
    noteCommitment1: Buffer.from(noteCommitment1, 'hex'),
    noteCommitment2: Buffer.from(noteCommitment2, 'hex'),
});
exports.pendingTxFromJson = pendingTxFromJson;
const initialWorldStateToBuffer = (initialWorldState) => {
    const accountsSizeBuf = Buffer.alloc(4);
    accountsSizeBuf.writeUInt32BE(initialWorldState.initialAccounts.length);
    return Buffer.concat([accountsSizeBuf, initialWorldState.initialAccounts, ...initialWorldState.initialSubtreeRoots]);
};
exports.initialWorldStateToBuffer = initialWorldStateToBuffer;
const initialWorldStateFromBuffer = (data) => {
    const accountsSize = data.readUInt32BE(0);
    const subTreeStart = 4 + accountsSize;
    const initialWorldState = {
        initialAccounts: data.slice(4, subTreeStart),
        initialSubtreeRoots: [],
    };
    // each sub tree root is 32 bytes
    for (let i = subTreeStart; i < data.length; i += 32) {
        initialWorldState.initialSubtreeRoots.push(data.slice(i, i + 32));
    }
    return initialWorldState;
};
exports.initialWorldStateFromBuffer = initialWorldStateFromBuffer;
const depositTxToJson = ({ assetId, value, publicOwner }) => ({
    assetId,
    value: value.toString(),
    publicOwner: publicOwner.toString(),
});
exports.depositTxToJson = depositTxToJson;
const depositTxFromJson = ({ assetId, value, publicOwner }) => ({
    assetId,
    value: BigInt(value),
    publicOwner: address_1.EthAddress.fromString(publicOwner),
});
exports.depositTxFromJson = depositTxFromJson;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicm9sbHVwX3Byb3ZpZGVyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL3JvbGx1cF9wcm92aWRlci9yb2xsdXBfcHJvdmlkZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBQUEsd0NBQXlEO0FBSXpELG9DQUFnQztBQUdoQyxJQUFZLGdCQUdYO0FBSEQsV0FBWSxnQkFBZ0I7SUFDMUIscUVBQVcsQ0FBQTtJQUNYLDZEQUFPLENBQUE7QUFDVCxDQUFDLEVBSFcsZ0JBQWdCLEdBQWhCLHdCQUFnQixLQUFoQix3QkFBZ0IsUUFHM0I7QUFFRCxJQUFZLGtCQUlYO0FBSkQsV0FBWSxrQkFBa0I7SUFDNUIsbUVBQVEsQ0FBQTtJQUNSLHlFQUFXLENBQUE7SUFDWCxpRUFBTyxDQUFBO0FBQ1QsQ0FBQyxFQUpXLGtCQUFrQixHQUFsQiwwQkFBa0IsS0FBbEIsMEJBQWtCLFFBSTdCO0FBY00sTUFBTSxRQUFRLEdBQUcsQ0FBQyxFQUFFLFNBQVMsRUFBRSxjQUFjLEVBQUUsZ0JBQWdCLEVBQU0sRUFBVSxFQUFFLENBQUMsQ0FBQztJQUN4RixTQUFTLEVBQUUsU0FBUyxDQUFDLFFBQVEsQ0FBQyxLQUFLLENBQUM7SUFDcEMsY0FBYyxFQUFFLGNBQWMsQ0FBQyxRQUFRLENBQUMsS0FBSyxDQUFDO0lBQzlDLGdCQUFnQixFQUFFLGdCQUFnQixDQUFDLENBQUMsQ0FBQyxnQkFBZ0IsQ0FBQyxRQUFRLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLFNBQVM7Q0FDbEYsQ0FBQyxDQUFDO0FBSlUsUUFBQSxRQUFRLFlBSWxCO0FBRUksTUFBTSxVQUFVLEdBQUcsQ0FBQyxFQUFFLFNBQVMsRUFBRSxjQUFjLEVBQUUsZ0JBQWdCLEVBQVUsRUFBTSxFQUFFLENBQUMsQ0FBQztJQUMxRixTQUFTLEVBQUUsTUFBTSxDQUFDLElBQUksQ0FBQyxTQUFTLEVBQUUsS0FBSyxDQUFDO0lBQ3hDLGNBQWMsRUFBRSxNQUFNLENBQUMsSUFBSSxDQUFD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