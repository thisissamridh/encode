"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.RollupProofData = exports.RollupProofDataOffsets = exports.RollupProofDataFields = void 0;
const crypto_1 = require("crypto");
const client_proofs_1 = require("../client_proofs");
const serialize_1 = require("../serialize");
const decode_inner_proof_1 = require("./decode_inner_proof");
const encode_inner_proof_1 = require("./encode_inner_proof");
const inner_proof_1 = require("./inner_proof");
const _1 = require(".");
const bigint_buffer_1 = require("../bigint_buffer");
const bridge_id_1 = require("../bridge_id");
var RollupProofDataFields;
(function (RollupProofDataFields) {
    RollupProofDataFields[RollupProofDataFields["ROLLUP_ID"] = 0] = "ROLLUP_ID";
    RollupProofDataFields[RollupProofDataFields["ROLLUP_SIZE"] = 1] = "ROLLUP_SIZE";
    RollupProofDataFields[RollupProofDataFields["DATA_START_INDEX"] = 2] = "DATA_START_INDEX";
    RollupProofDataFields[RollupProofDataFields["OLD_DATA_ROOT"] = 3] = "OLD_DATA_ROOT";
    RollupProofDataFields[RollupProofDataFields["NEW_DATA_ROOT"] = 4] = "NEW_DATA_ROOT";
    RollupProofDataFields[RollupProofDataFields["OLD_NULL_ROOT"] = 5] = "OLD_NULL_ROOT";
    RollupProofDataFields[RollupProofDataFields["NEW_NULL_ROOT"] = 6] = "NEW_NULL_ROOT";
    RollupProofDataFields[RollupProofDataFields["OLD_ROOT_ROOT"] = 7] = "OLD_ROOT_ROOT";
    RollupProofDataFields[RollupProofDataFields["NEW_ROOT_ROOT"] = 8] = "NEW_ROOT_ROOT";
    RollupProofDataFields[RollupProofDataFields["OLD_DEFI_ROOT"] = 9] = "OLD_DEFI_ROOT";
    RollupProofDataFields[RollupProofDataFields["NEW_DEFI_ROOT"] = 10] = "NEW_DEFI_ROOT";
})(RollupProofDataFields = exports.RollupProofDataFields || (exports.RollupProofDataFields = {}));
var RollupProofDataOffsets;
(function (RollupProofDataOffsets) {
    RollupProofDataOffsets[RollupProofDataOffsets["ROLLUP_ID"] = 28] = "ROLLUP_ID";
    RollupProofDataOffsets[RollupProofDataOffsets["ROLLUP_SIZE"] = 60] = "ROLLUP_SIZE";
    RollupProofDataOffsets[RollupProofDataOffsets["DATA_START_INDEX"] = 92] = "DATA_START_INDEX";
    RollupProofDataOffsets[RollupProofDataOffsets["OLD_DATA_ROOT"] = 96] = "OLD_DATA_ROOT";
    RollupProofDataOffsets[RollupProofDataOffsets["NEW_DATA_ROOT"] = 128] = "NEW_DATA_ROOT";
    RollupProofDataOffsets[RollupProofDataOffsets["OLD_NULL_ROOT"] = 160] = "OLD_NULL_ROOT";
    RollupProofDataOffsets[RollupProofDataOffsets["NEW_NULL_ROOT"] = 192] = "NEW_NULL_ROOT";
    RollupProofDataOffsets[RollupProofDataOffsets["OLD_ROOT_ROOT"] = 224] = "OLD_ROOT_ROOT";
    RollupProofDataOffsets[RollupProofDataOffsets["NEW_ROOT_ROOT"] = 256] = "NEW_ROOT_ROOT";
    RollupProofDataOffsets[RollupProofDataOffsets["OLD_DEFI_ROOT"] = 288] = "OLD_DEFI_ROOT";
    RollupProofDataOffsets[RollupProofDataOffsets["NEW_DEFI_ROOT"] = 320] = "NEW_DEFI_ROOT";
})(RollupProofDataOffsets = exports.RollupProofDataOffsets || (exports.RollupProofDataOffsets = {}));
const parseHeaderInputs = (proofData) => {
    const rollupId = RollupProofData.getRollupIdFromBuffer(proofData);
    const rollupSize = proofData.readUInt32BE(RollupProofDataOffsets.ROLLUP_SIZE);
    const dataStartIndex = proofData.readUInt32BE(RollupProofDataOffsets.DATA_START_INDEX);
    const oldDataRoot = proofData.slice(RollupProofDataOffsets.OLD_DATA_ROOT, RollupProofDataOffsets.OLD_DATA_ROOT + 32);
    const newDataRoot = proofData.slice(RollupProofDataOffsets.NEW_DATA_ROOT, RollupProofDataOffsets.NEW_DATA_ROOT + 32);
    const oldNullRoot = proofData.slice(RollupProofDataOffsets.OLD_NULL_ROOT, RollupProofDataOffsets.OLD_NULL_ROOT + 32);
    const newNullRoot = proofData.slice(RollupProofDataOffsets.NEW_NULL_ROOT, RollupProofDataOffsets.NEW_NULL_ROOT + 32);
    const oldDataRootsRoot = proofData.slice(RollupProofDataOffsets.OLD_ROOT_ROOT, RollupProofDataOffsets.OLD_ROOT_ROOT + 32);
    const newDataRootsRoot = proofData.slice(RollupProofDataOffsets.NEW_ROOT_ROOT, RollupProofDataOffsets.NEW_ROOT_ROOT + 32);
    const oldDefiRoot = proofData.slice(RollupProofDataOffsets.OLD_DEFI_ROOT, RollupProofDataOffsets.OLD_DEFI_ROOT + 32);
    const newDefiRoot = proofData.slice(RollupProofDataOffsets.NEW_DEFI_ROOT, RollupProofDataOffsets.NEW_DEFI_ROOT + 32);
    let startIndex = 11 * 32;
    const bridgeIds = [];
    for (let i = 0; i < RollupProofData.NUM_BRIDGE_CALLS_PER_BLOCK; ++i) {
        bridgeIds.push(proofData.slice(startIndex, startIndex + 32));
        startIndex += 32;
    }
    const defiDepositSums = [];
    for (let i = 0; i < RollupProofData.NUM_BRIDGE_CALLS_PER_BLOCK; ++i) {
        defiDepositSums.push((0, bigint_buffer_1.toBigIntBE)(proofData.slice(startIndex, startIndex + 32)));
        startIndex += 32;
    }
    const assetIds = [];
    for (let i = 0; i < RollupProofData.NUMBER_OF_ASSETS; ++i) {
        assetIds.push(proofData.readUInt32BE(startIndex + 28));
        startIndex += 32;
    }
    const totalTxFees = [];
    for (let i = 0; i < RollupProofData.NUMBER_OF_ASSETS; ++i) {
        totalTxFees.push((0, bigint_buffer_1.toBigIntBE)(proofData.slice(startIndex, startIndex + 32)));
        startIndex += 32;
    }
    const defiInteractionNotes = [];
    for (let i = 0; i < RollupProofData.NUM_BRIDGE_CALLS_PER_BLOCK; ++i) {
        defiInteractionNotes.push(proofData.slice(startIndex, startIndex + 32));
        startIndex += 32;
    }
    const prevDefiInteractionHash = proofData.slice(startIndex, startIndex + 32);
    startIndex += 32;
    const rollupBeneficiary = proofData.slice(startIndex, startIndex + 32);
    startIndex += 32;
    const numRollupTxs = proofData.readUInt32BE(startIndex + 28);
    startIndex += 32;
    return {
        rollupId,
        rollupSize,
        dataStartIndex,
        oldDataRoot,
        newDataRoot,
        oldNullRoot,
        newNullRoot,
        oldDataRootsRoot,
        newDataRootsRoot,
        oldDefiRoot,
        newDefiRoot,
        bridgeIds,
        defiDepositSums,
        assetIds,
        totalTxFees,
        defiInteractionNotes,
        prevDefiInteractionHash,
        rollupBeneficiary,
        numRollupTxs,
    };
};
class RollupProofData {
    constructor(rollupId, rollupSize, dataStartIndex, oldDataRoot, newDataRoot, oldNullRoot, newNullRoot, oldDataRootsRoot, newDataRootsRoot, oldDefiRoot, newDefiRoot, bridgeIds, defiDepositSums, assetIds, totalTxFees, defiInteractionNotes, prevDefiInteractionHash, rollupBeneficiary, numRollupTxs, innerProofData) {
        this.rollupId = rollupId;
        this.rollupSize = rollupSize;
        this.dataStartIndex = dataStartIndex;
        this.oldDataRoot = oldDataRoot;
        this.newDataRoot = newDataRoot;
        this.oldNullRoot = oldNullRoot;
        this.newNullRoot = newNullRoot;
        this.oldDataRootsRoot = oldDataRootsRoot;
        this.newDataRootsRoot = newDataRootsRoot;
        this.oldDefiRoot = oldDefiRoot;
        this.newDefiRoot = newDefiRoot;
        this.bridgeIds = bridgeIds;
        this.defiDepositSums = defiDepositSums;
        this.assetIds = assetIds;
        this.totalTxFees = totalTxFees;
        this.defiInteractionNotes = defiInteractionNotes;
        this.prevDefiInteractionHash = prevDefiInteractionHash;
        this.rollupBeneficiary = rollupBeneficiary;
        this.numRollupTxs = numRollupTxs;
        this.innerProofData = innerProofData;
        if (bridgeIds.length !== RollupProofData.NUM_BRIDGE_CALLS_PER_BLOCK) {
            throw new Error(`Expect bridgeIds to be an array of size ${RollupProofData.NUM_BRIDGE_CALLS_PER_BLOCK}.`);
        }
        if (defiDepositSums.length !== RollupProofData.NUM_BRIDGE_CALLS_PER_BLOCK) {
            throw new Error(`Expect defiDepositSums to be an array of size ${RollupProofData.NUM_BRIDGE_CALLS_PER_BLOCK}.`);
        }
        if (totalTxFees.length !== RollupProofData.NUMBER_OF_ASSETS) {
            throw new Error(`Expect totalTxFees to be an array of size ${RollupProofData.NUMBER_OF_ASSETS}.`);
        }
        if (defiInteractionNotes.length !== RollupProofData.NUM_BRIDGE_CALLS_PER_BLOCK) {
            throw new Error(`Expect defiInteractionNotes to be an array of size ${RollupProofData.NUM_BRIDGE_CALLS_PER_BLOCK}.`);
        }
    }
    get rollupHash() {
        if (!this.rollupHash_) {
            const allTxIds = this.innerProofData.map(innerProof => innerProof.txId);
            this.rollupHash_ = (0, crypto_1.createHash)('sha256').update(Buffer.concat(allTxIds)).digest();
        }
        return this.rollupHash_;
    }
    toBuffer() {
        return Buffer.concat([
            (0, serialize_1.numToUInt32BE)(this.rollupId, 32),
            (0, serialize_1.numToUInt32BE)(this.rollupSize, 32),
            (0, serialize_1.numToUInt32BE)(this.dataStartIndex, 32),
            this.oldDataRoot,
            this.newDataRoot,
            this.oldNullRoot,
            this.newNullRoot,
            this.oldDataRootsRoot,
            this.newDataRootsRoot,
            this.oldDefiRoot,
            this.newDefiRoot,
            ...this.bridgeIds,
            ...this.defiDepositSums.map(v => (0, bigint_buffer_1.toBufferBE)(v, 32)),
            ...this.assetIds.map(a => (0, serialize_1.numToUInt32BE)(a, 32)),
            ...this.totalTxFees.map(a => (0, bigint_buffer_1.toBufferBE)(a, 32)),
            ...this.defiInteractionNotes,
            this.prevDefiInteractionHash,
            this.rollupBeneficiary,
            (0, serialize_1.numToUInt32BE)(this.numRollupTxs, 32),
            ...this.innerProofData.map(p => p.toBuffer()),
        ]);
    }
    getTotalDeposited(assetId) {
        return this.innerProofData
            .filter(p => p.proofId === client_proofs_1.ProofId.DEPOSIT)
            .map(p => new _1.RollupDepositProofData(p))
            .filter(p => p.assetId == assetId)
            .reduce((a, p) => a + p.publicValue, BigInt(0));
    }
    getTotalWithdrawn(assetId) {
        return this.innerProofData
            .filter(p => p.proofId === client_proofs_1.ProofId.WITHDRAW)
            .map(p => new _1.RollupWithdrawProofData(p))
            .filter(p => p.assetId == assetId)
            .reduce((a, p) => a + p.publicValue, BigInt(0));
    }
    getTotalDefiDeposit(assetId) {
        return this.bridgeIds
            .map((bridgeId, i) => {
            if (bridge_id_1.BridgeId.fromBuffer(bridgeId).inputAssetIdA === assetId ||
                bridge_id_1.BridgeId.fromBuffer(bridgeId).inputAssetIdB === assetId) {
                return this.defiDepositSums[i];
            }
            else {
                return BigInt(0);
            }
        })
            .reduce((acc, val) => acc + val, BigInt(0));
    }
    getTotalFees(assetId) {
        const index = this.assetIds.indexOf(assetId);
        return index < 0 ? BigInt(0) : this.totalTxFees[index];
    }
    encode() {
        let lastNonEmptyIndex = 0;
        this.innerProofData.forEach((p, i) => {
            if (p.proofId !== client_proofs_1.ProofId.PADDING) {
                lastNonEmptyIndex = i;
            }
        });
        const numRealTxns = lastNonEmptyIndex + 1;
        const encodedInnerProof = this.innerProofData.filter((p, i) => i < numRealTxns).map(p => (0, encode_inner_proof_1.encodeInnerProof)(p));
        return Buffer.concat([
            (0, serialize_1.numToUInt32BE)(this.rollupId, 32),
            (0, serialize_1.numToUInt32BE)(this.rollupSize, 32),
            (0, serialize_1.numToUInt32BE)(this.dataStartIndex, 32),
            this.oldDataRoot,
            this.newDataRoot,
            this.oldNullRoot,
            this.newNullRoot,
            this.oldDataRootsRoot,
            this.newDataRootsRoot,
            this.oldDefiRoot,
            this.newDefiRoot,
            ...this.bridgeIds,
            ...this.defiDepositSums.map(v => (0, bigint_buffer_1.toBufferBE)(v, 32)),
            ...this.assetIds.map(a => (0, serialize_1.numToUInt32BE)(a, 32)),
            ...this.totalTxFees.map(a => (0, bigint_buffer_1.toBufferBE)(a, 32)),
            ...this.defiInteractionNotes,
            this.prevDefiInteractionHash,
            this.rollupBeneficiary,
            (0, serialize_1.numToUInt32BE)(this.numRollupTxs, 32),
            (0, serialize_1.numToUInt32BE)(numRealTxns),
            (0, serialize_1.numToUInt32BE)(Buffer.concat(encodedInnerProof).length),
            ...encodedInnerProof,
        ]);
    }
    static getRollupIdFromBuffer(proofData) {
        return proofData.readUInt32BE(RollupProofDataOffsets.ROLLUP_ID);
    }
    static getRollupSizeFromBuffer(proofData) {
        return proofData.readUInt32BE(RollupProofDataOffsets.ROLLUP_SIZE);
    }
    static getTxIdsFromBuffer(proofData) {
        const rollupSize = RollupProofData.getRollupSizeFromBuffer(proofData);
        const startIndex = RollupProofData.LENGTH_ROLLUP_HEADER_INPUTS;
        return Array.from({ length: rollupSize })
            .map((_, i) => {
            const innerProofStart = startIndex + i * inner_proof_1.InnerProofData.LENGTH;
            return (0, client_proofs_1.createTxId)(proofData.slice(innerProofStart, innerProofStart + inner_proof_1.InnerProofData.LENGTH));
        })
            .filter(id => !id.equals(inner_proof_1.InnerProofData.PADDING.txId));
    }
    getNonPaddingProofs() {
        return this.innerProofData.filter(proofData => !proofData.isPadding());
    }
    getNonPaddingTxIds() {
        return this.getNonPaddingProofs().map(proof => proof.txId);
    }
    getNonPaddingProofIds() {
        return this.getNonPaddingProofs().map(proof => proof.proofId);
    }
    static fromBuffer(proofData) {
        const { rollupId, rollupSize, dataStartIndex, oldDataRoot, newDataRoot, oldNullRoot, newNullRoot, oldDataRootsRoot, newDataRootsRoot, oldDefiRoot, newDefiRoot, bridgeIds, defiDepositSums, assetIds, totalTxFees, defiInteractionNotes, prevDefiInteractionHash, rollupBeneficiary, numRollupTxs, } = parseHeaderInputs(proofData);
        if (!rollupSize) {
            throw new Error('Empty rollup.');
        }
        let startIndex = RollupProofData.LENGTH_ROLLUP_HEADER_INPUTS;
        const innerProofData = [];
        for (let i = 0; i < rollupSize; ++i) {
            const innerData = proofData.slice(startIndex, startIndex + inner_proof_1.InnerProofData.LENGTH);
            innerProofData[i] = inner_proof_1.InnerProofData.fromBuffer(innerData);
            startIndex += inner_proof_1.InnerProofData.LENGTH;
        }
        return new RollupProofData(rollupId, rollupSize, dataStartIndex, oldDataRoot, newDataRoot, oldNullRoot, newNullRoot, oldDataRootsRoot, newDataRootsRoot, oldDefiRoot, newDefiRoot, bridgeIds, defiDepositSums, assetIds, totalTxFees, defiInteractionNotes, prevDefiInteractionHash, rollupBeneficiary, numRollupTxs, innerProofData);
    }
    static randomData(rollupId, numTxs, dataStartIndex = 0, innerProofData, bridgeIds = []) {
        const ipd = innerProofData === undefined
            ? new Array(numTxs).fill(0).map(() => inner_proof_1.InnerProofData.fromBuffer(Buffer.alloc(inner_proof_1.InnerProofData.LENGTH)))
            : innerProofData;
        return new RollupProofData(rollupId, numTxs, dataStartIndex, Buffer.alloc(32), Buffer.alloc(32), Buffer.alloc(32), Buffer.alloc(32), Buffer.alloc(32), Buffer.alloc(32), Buffer.alloc(32), Buffer.alloc(32), bridgeIds
            .map(b => b.toBuffer())
            .concat(new Array(RollupProofData.NUM_BRIDGE_CALLS_PER_BLOCK - bridgeIds.length).fill(0).map(() => Buffer.alloc(32))), new Array(RollupProofData.NUM_BRIDGE_CALLS_PER_BLOCK).fill(BigInt(0)), new Array(RollupProofData.NUMBER_OF_ASSETS).fill(0), new Array(RollupProofData.NUMBER_OF_ASSETS).fill(BigInt(0)), new Array(RollupProofData.NUM_BRIDGE_CALLS_PER_BLOCK).fill(0).map(() => Buffer.alloc(32)), Buffer.alloc(32), Buffer.alloc(32), ipd.length, ipd);
    }
    static decode(encoded) {
        const { rollupId, rollupSize, dataStartIndex, oldDataRoot, newDataRoot, oldNullRoot, newNullRoot, oldDataRootsRoot, newDataRootsRoot, oldDefiRoot, newDefiRoot, bridgeIds, defiDepositSums, assetIds, totalTxFees, defiInteractionNotes, prevDefiInteractionHash, rollupBeneficiary, numRollupTxs, } = parseHeaderInputs(encoded);
        if (!rollupSize) {
            throw new Error('Empty rollup.');
        }
        let startIndex = RollupProofData.LENGTH_ROLLUP_HEADER_INPUTS;
        startIndex += 4; // skip over numRealTxs
        let innerProofDataLength = encoded.readUInt32BE(startIndex);
        startIndex += 4;
        const innerProofData = [];
        while (innerProofDataLength > 0) {
            const innerProof = (0, decode_inner_proof_1.decodeInnerProof)(encoded.slice(startIndex));
            innerProofData.push(innerProof.proofData);
            startIndex += innerProof.ENCODED_LENGTH;
            innerProofDataLength -= innerProof.ENCODED_LENGTH;
        }
        for (let i = innerProofData.length; i < rollupSize; ++i) {
            innerProofData.push(inner_proof_1.InnerProofData.PADDING);
        }
        return new RollupProofData(rollupId, rollupSize, dataStartIndex, oldDataRoot, newDataRoot, oldNullRoot, newNullRoot, oldDataRootsRoot, newDataRootsRoot, oldDefiRoot, newDefiRoot, bridgeIds, defiDepositSums, assetIds, totalTxFees, defiInteractionNotes, prevDefiInteractionHash, rollupBeneficiary, numRollupTxs, innerProofData);
    }
}
exports.RollupProofData = RollupProofData;
RollupProofData.NUMBER_OF_ASSETS = 16;
RollupProofData.NUM_BRIDGE_CALLS_PER_BLOCK = 32;
RollupProofData.NUM_ROLLUP_HEADER_INPUTS = 14 + RollupProofData.NUMBER_OF_ASSETS * 2 + RollupProofData.NUM_BRIDGE_CALLS_PER_BLOCK * 3;
RollupProofData.LENGTH_ROLLUP_HEADER_INPUTS = RollupProofData.NUM_ROLLUP_HEADER_INPUTS * 32;
//# sourceMappingURL=data:application/json;base64,