"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.createRollupProofData = exports.randomInnerProofData = exports.randomWithdrawProofData = exports.randomSendProofData = exports.randomDepositProofData = void 0;
const crypto_1 = require("crypto");
const address_1 = require("../address");
const proof_data_1 = require("../client_proofs/proof_data");
const _1 = require("./");
const randomCommitment = () => (0, crypto_1.randomBytes)(32);
const randomNullifier = () => (0, crypto_1.randomBytes)(32);
const randomInt = () => Buffer.concat([Buffer.alloc(28), (0, crypto_1.randomBytes)(4)]);
const randomDepositProofData = () => new _1.InnerProofData(proof_data_1.ProofId.DEPOSIT, randomCommitment(), randomCommitment(), randomNullifier(), randomNullifier(), randomInt(), address_1.EthAddress.random().toBuffer32(), Buffer.alloc(32));
exports.randomDepositProofData = randomDepositProofData;
const randomSendProofData = () => new _1.InnerProofData(proof_data_1.ProofId.SEND, randomCommitment(), randomCommitment(), randomNullifier(), randomNullifier(), Buffer.alloc(32), Buffer.alloc(32), Buffer.alloc(32));
exports.randomSendProofData = randomSendProofData;
const randomWithdrawProofData = () => new _1.InnerProofData(proof_data_1.ProofId.WITHDRAW, randomCommitment(), randomCommitment(), randomNullifier(), randomNullifier(), randomInt(), address_1.EthAddress.random().toBuffer32(), randomInt());
exports.randomWithdrawProofData = randomWithdrawProofData;
const randomInnerProofData = (proofId = proof_data_1.ProofId.SEND) => {
    switch (proofId) {
        case proof_data_1.ProofId.DEPOSIT:
            return (0, exports.randomDepositProofData)();
        case proof_data_1.ProofId.WITHDRAW:
            return (0, exports.randomWithdrawProofData)();
        case proof_data_1.ProofId.SEND:
            return (0, exports.randomSendProofData)();
        default:
            return new _1.InnerProofData(proofId, randomCommitment(), randomCommitment(), randomNullifier(), [proof_data_1.ProofId.ACCOUNT, proof_data_1.ProofId.DEFI_DEPOSIT].includes(proofId) ? randomNullifier() : Buffer.alloc(32), Buffer.alloc(32), Buffer.alloc(32), Buffer.alloc(32));
    }
};
exports.randomInnerProofData = randomInnerProofData;
const createRollupProofData = (innerProofs) => {
    const bridgeIds = [...Array(_1.RollupProofData.NUM_BRIDGE_CALLS_PER_BLOCK)].map(() => (0, crypto_1.randomBytes)(32));
    const defiDepositSums = [...Array(_1.RollupProofData.NUM_BRIDGE_CALLS_PER_BLOCK)].map(() => BigInt(0));
    const defiInteractionNotes = [...Array(_1.RollupProofData.NUM_BRIDGE_CALLS_PER_BLOCK)].map(() => (0, crypto_1.randomBytes)(32));
    const assetIds = [...Array(_1.RollupProofData.NUMBER_OF_ASSETS)].map(() => 0);
    const totalTxFees = [...Array(_1.RollupProofData.NUMBER_OF_ASSETS)].map(() => BigInt(0));
    return new _1.RollupProofData((0, crypto_1.randomBytes)(4).readUInt32BE(0), innerProofs.length, (0, crypto_1.randomBytes)(4).readUInt32BE(0), (0, crypto_1.randomBytes)(32), (0, crypto_1.randomBytes)(32), (0, crypto_1.randomBytes)(32), (0, crypto_1.randomBytes)(32), (0, crypto_1.randomBytes)(32), (0, crypto_1.randomBytes)(32), (0, crypto_1.randomBytes)(32), (0, crypto_1.randomBytes)(32), bridgeIds, defiDepositSums, assetIds, totalTxFees, defiInteractionNotes, (0, crypto_1.randomBytes)(32), (0, crypto_1.randomBytes)(32), innerProofs.length, innerProofs);
};
exports.createRollupProofData = createRollupProofData;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZml4dHVyZXMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvcm9sbHVwX3Byb29mL2ZpeHR1cmVzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUFBLG1DQUFxQztBQUNyQyx3Q0FBd0M7QUFDeEMsNERBQXNEO0FBQ3RELHlCQUFxRDtBQUVyRCxNQUFNLGdCQUFnQixHQUFHLEdBQUcsRUFBRSxDQUFDLElBQUEsb0JBQVcsRUFBQyxFQUFFLENBQUMsQ0FBQztBQUMvQyxNQUFNLGVBQWUsR0FBRyxHQUFHLEVBQUUsQ0FBQyxJQUFBLG9CQUFXLEVBQUMsRUFBRSxDQUFDLENBQUM7QUFDOUMsTUFBTSxTQUFTLEdBQUcsR0FBRyxFQUFFLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLEVBQUUsSUFBQSxvQkFBVyxFQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztBQUVuRSxNQUFNLHNCQUFzQixHQUFHLEdBQUcsRUFBRSxDQUN6QyxJQUFJLGlCQUFjLENBQ2hCLG9CQUFPLENBQUMsT0FBTyxFQUNmLGdCQUFnQixFQUFFLEVBQ2xCLGdCQUFnQixFQUFFLEVBQ2xCLGVBQWUsRUFBRSxFQUNqQixlQUFlLEVBQUUsRUFDakIsU0FBUyxFQUFFLEVBQ1gsb0JBQVUsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxVQUFVLEVBQUUsRUFDaEMsTUFBTSxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUMsQ0FDakIsQ0FBQztBQVZTLFFBQUEsc0JBQXNCLDBCQVUvQjtBQUVHLE1BQU0sbUJBQW1CLEdBQUcsR0FBRyxFQUFFLENBQ3RDLElBQUksaUJBQWMsQ0FDaEIsb0JBQU8sQ0FBQyxJQUFJLEVBQ1osZ0JBQWdCLEVBQUUsRUFDbEIsZ0JBQWdCLEVBQUUsRUFDbEIsZUFBZSxFQUFFLEVBQ2pCLGVBQWUsRUFBRSxFQUNqQixNQUFNLENBQUMsS0FBSyxDQUFDLEVBQUUsQ0FBQyxFQUNoQixNQUFN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